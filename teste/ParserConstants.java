package teste;

public interface ParserConstants
{
    int START_SYMBOL = 38;

    int FIRST_NON_TERMINAL    = 38;
    int FIRST_SEMANTIC_ACTION = 76;

    int[][] PARSER_TABLE =
    {
        { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1 },
        { -1, -1, -1,  3,  2, -1, -1, -1, -1,  2,  2,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  9, -1, -1, -1, -1,  5,  6,  7,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, 15, -1, -1 },
        { -1, -1, -1, -1, 36, -1, -1, -1, -1, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 38, 37, 38, 38, -1, -1, 37, 37, 37, 37, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 45, -1, -1, -1, -1, 40, 41, 42, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, 30, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, 33, 33, -1, -1, -1, -1, -1, 33, -1, 33, 33, 33, 33, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, 47, -1, 47, 47, 47, 47, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 26, -1, 27, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 28, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 48, -1, -1, -1, -1, 48, 48, 48, 48, -1, -1, 49, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1, 48, 48, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, 51, -1, 51, 51, 51, 51, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 55, -1, -1, -1, -1, -1, 55, -1, 55, 55, 55, 55, -1, -1 },
        { -1, -1, -1, -1, 56, -1, -1, -1, -1, 56, 56, 56, 56, -1, -1, 56, 56, -1, 57, 57, 57, 57, -1, -1, -1, -1, 56, 56, -1, -1, 56, 56, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, -1, -1, 62, -1, 62, 62, 62, 62, -1, -1 },
        { -1, -1, -1, -1, 63, -1, -1, -1, -1, 63, 63, 63, 63, -1, -1, 63, 63, -1, 63, 63, 63, 63, 64, 65, -1, -1, 63, 63, -1, -1, 63, 63, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, 66, -1, 66, 66, 66, 66, -1, -1 },
        { -1, -1, -1, -1, 67, -1, -1, -1, -1, 67, 67, 67, 67, -1, -1, 67, 67, -1, 67, 67, 67, 67, 67, 67, 68, 69, 67, 67, -1, -1, 67, 67, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 76, -1, -1, -1, -1, -1, 74, -1, 70, 71, 72, 73, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 176,   3,  39,  64, 177 },
        {  41,  28,  40 },
        {  41,  28,  40 },
        {   0 },
        {  47,  42 },
        {  63 },
        {  54 },
        {  55 },
        {  56 },
        {  62 },
        { 178 },
        {  29,  53, 179 },
        {  32, 180,  48 },
        {   0 },
        {  27,  47 },
        {  35, 182,  27 },
        {   0 },
        {  47,  29,  53, 179 },
        {  10,  30,  49,  31 },
        {  11,  30,  51,  31 },
        {  12,  30,  51,  31, 183 },
        {  57 },
        { 189,  13,  44,  58 },
        {  14,  53, 191 },
        {  15,  53, 190 },
        {   5,  53, 185,  44 },
        {   0 },
        { 186,   6,  53, 188,  44,  60 },
        {   4 },
        {   7,  44,   4 },
        {  43,  32, 181,  50 },
        {  27,  49 },
        {   0 },
        {  53, 184,  52 },
        {  27,  51 },
        {   0 },
        {  46,  28,  45 },
        {  46,  28,  45 },
        {   0 },
        {  59,  60, 186,  61, 187 },
        {  63 },
        {  54 },
        {  55 },
        {  56 },
        {  65 },
        {  62 },
        {   4 },
        {  67,  66 },
        {   0 },
        {  16,  67, 192,  66 },
        {  17,  67, 193,  66 },
        {  68 },
        {   9, 194 },
        {   8, 195 },
        {  18,  67, 196 },
        {  71,  69 },
        {   0 },
        {  70, 197,  71, 198 },
        {  19 },
        {  20 },
        {  21 },
        {  22 },
        {  73,  72 },
        {   0 },
        {  23,  73, 199,  72 },
        {  24,  73, 200,  72 },
        {  75,  74 },
        {   0 },
        {  25,  75, 201,  74 },
        {  26,  75, 202,  74 },
        {  32, 203 },
        {  33, 204 },
        {  34, 205 },
        {  35, 206 },
        {  30,  53,  31 },
        {  23,  75 },
        {  24,  75, 207 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado: fim de programa",//"Era esperado fim de programa",
        "esperado: palavra_reservada",//"Era esperado palavra_reservada",
        "esperado: pr_main",//"Era esperado pr_main",
        "esperado: pr_end",//"Era esperado pr_end",
        "esperado: pr_if",//"Era esperado pr_if",
        "esperado: pr_elif",//"Era esperado pr_elif",
        "esperado: pr_else",//"Era esperado pr_else",
        "esperado: pr_false",//"Era esperado pr_false",
        "esperado: pr_true",//"Era esperado pr_true",
        "esperado: pr_read",//"Era esperado pr_read",
        "esperado: pr_write",//"Era esperado pr_write",
        "esperado: pr_writeln",//"Era esperado pr_writeln",
        "esperado: pr_repeat",//"Era esperado pr_repeat",
        "esperado: pr_until",//"Era esperado pr_until",
        "esperado: pr_while",//"Era esperado pr_while",
        "esperado: \"&&\"",//"Era esperado \"&&\"",
        "esperado: \"||\"",//"Era esperado \"||\"",
        "esperado: \"!\"",//"Era esperado \"!\"",
        "esperado: \"==\"",//"Era esperado \"==\"",
        "esperado: \"!=\"",//"Era esperado \"!=\"",
        "esperado: \"<\"",//"Era esperado \"<\"",
        "esperado: \">\"",//"Era esperado \">\"",
        "esperado: \"+\"",//"Era esperado \"+\"",
        "esperado: \"-\"",//"Era esperado \"-\"",
        "esperado: \"*\"",//"Era esperado \"*\"",
        "esperado: \"/\"",//"Era esperado \"/\"",
        "esperado: \",\"",//"Era esperado \",\"",
        "esperado: \";\"",//"Era esperado \";\"",
        "esperado: \"=\"",//"Era esperado \"=\"",
        "esperado: \"(\"",//"Era esperado \"(\"",
        "esperado: \")\"",//"Era esperado \")\"",
        "esperado: identificador",//"Era esperado id",
        "esperado: constante_int",//"Era esperado constante_int",
        "esperado: constante_float",//"Era esperado constante_float",
        "esperado: constante_string",//"Era esperado constante_string",
        "esperado: comentario",//"Era esperado comentario",
        "esperado: caractere_de_formatação",//"Era esperado caractere_de_formatação",
        "<main> inválido", //feito
        
        "<lista_de_instrucoes> inválido",//feito
        "<lista_de_instrucoes2> inválido",//feito
        
        "<instrucao> inválido",//feito
        "<instrucao1> inválido",//feito
        "<opcional> inválido",//feito
        
        "<lista_de_comandos> inválido",//feito
        "<lista_de_comandos2> inválido",//feito
        "<comando> inválido",//feito
        
        "<lista_de_identificadores> inválido",//feito
        "<lista_de_identificadores2> inválido",//feito
        
        "<lista_de_entrada> inválido",//feito
        "<lista_de_entrada2> inválido",//feito
        
        "<lista_de_expressoes> inválido",//feito
        "<lista_de_expressoes_2> inválido",//feito
        "<expressao> inválido",//feito
        
        "<write> inválido",
        "<writeln> inválido",
        "<repeat> inválido",
        "<repeat_while> inválido",
        "<repeat_until> inválido",
        "<if> inválido",
        "<elif> inválido",
        "<else> inválido",
        "<if_elif_else> inválido",
        "<read> inválido",
        "<end> inválido",
        "<att> inválido",
        
        "<expressao1> inválido",//feito
        "<elemento> inválido",//feito
        "<relacional> inválido",//feito
        "<relacional1> inválido",//feito
        "<operador_relacional> inválido",
        "<aritmetica> inválido",//feito
        "<aritmetica1> inválido",//feito
        "<termo> inválido",//feito
        "<termo1> inválido",//feito
        "<fator> inválido"//feito
    };
}
